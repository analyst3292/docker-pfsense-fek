# GROK match pattern for logstash.conf filter
# GROK Custom Patterns (add to patterns directory and reference in GROK filter for pfSense events):
# GROK Patterns for pfSense 2.3 Logging Format
# 
# Created 27 Jan 2015 by J. Pisano (Handles TCP, UDP, and ICMP log entries)
# Edited 19 Sep 2016 by FoxBoxsnet
#
# Usage: Use with following GROK match pattern
## Fluent FORMAT : %{SYSLOGTIMESTAMP:date} %{SYSLOGPROG}: %{PFSENSE}
## Fluent FORMAT : %{PFSENSE_SYSLOG_PATTERN}

# logformat
PFSENSE_SYSLOG_PATTERN (%{PFSENSE_PT1}|%{PFSENSE_PT2})
PFSENSE_PT1 %{SYSLOGTIMESTAMP:date} %{SYSLOGPROG}: %{PFSENSE}
PFSENSE_PT2 %{SYSLOGTIMESTAMP:date} (%{NGINX}|%{GREEDYDATA:message})
PFSENSE (%{FILTER}|%{DHCPD}|%{PHP_FPM}|%{OPENVPN}|%{GREEDYDATA:message})


FILTER (%{FILTER_LOG_DATA}%{FILTER_IP_SPECIFIC_DATA}%{FILTER_IP_DATA}%{FILTER_PROTOCOL_DATA})
DHCPD (%{DHCPD_DHCPDISCOVER}|%{DHCPD_DHCPOFFER}|%{DHCPD_DHCPREQUEST}|%{DHCPD_DHCPACK}|%{DHCPD_DHCPINFORM}|%{DHCPD_DHCPRELEASE})
PHP_FPM (%{PHP_FPM_LOGIN}|&{PHP_FPM_LOGOUT}|%{PHP_FPMM_FAILD})
OPENVPN (%{OPENVPN_USER_AUTH}|%{OPENVPN_PEER_CONN}|%{OPENVPN_USER_SEND}|%{OPENVPN_CONN_RESET}|%{OPENVPN_CONN})

## Filter log
FILTER_LOG_DATA (%{INT:rule}),(%{INT:sub_rule}),,(%{INT:tracker}),(%{WORD:iface}),(%{WORD:reason}),(%{WORD:action}),(%{WORD:rule_direction}),(%{INT:ip_ver}),
FILTER_IP_SPECIFIC_DATA (%{FILTER_IPv4_SPECIFIC_DATA}|%{FILTER_IPv6_SPECIFIC_DATA})
FILTER_IPv4_SPECIFIC_DATA (%{BASE16NUM:tos}),,(%{INT:ttl}),(%{INT:id}),(%{INT:offset}),(%{WORD:flags}),(%{INT:proto_id}),(%{WORD:proto}),
FILTER_IPv6_SPECIFIC_DATA (%{BASE16NUM:class}),(%{BASE16NUM:flow_label}),(%{INT:hop_limit}),(%{WORD:proto}),(%{INT:proto_id}),

### IP data
FILTER_IP_DATA (%{INT:length}),(%{IP:src_ip}),(%{IP:dest_ip})

### Protocols
FILTER_PROTOCOL_DATA (,%{FILTER_TCP_DATA}|,%{FILTER_UDP_DATA}|,%{FILTER_ICMP_DATA}|,%{FILTER_PFSYNC_DATA}|,%{FILTER_CARP_DATA}|,)

### TCP
FILTER_TCP_DATA (%{INT:src_port}),(%{INT:dest_port}),(%{INT:data_length}),(%{WORD:tcp_flags}),(%{NOTSPACE:sequence_number}),(%{INT:ack_number}?),(%{INT:tcp_window}),(%{DATA:urg_data}),(%{DATA:tcp_options})
\[,(%{INT:src_port}),(%{INT:dest_port}),(%{INT:data_length}),(%{WORD:tcp_flags}),(%{NOTSPACE:sequence_number}),(%{INT:ack_number}?),(%{INT:tcp_window}),(%{DATA:urg_data}),(%{DATA:tcp_options})\]

### UDP
FILTER_UDP_DATA (%{INT:src_port}),(%{INT:dest_port}),(%{INT:data_length})

### ICMP
FILTER_ICMP_DATA (%{FILTER_ICMP_TYPE}%{FILTER_ICMP_RESPONSE})
FILTER_PFSYNC_DATA (datalength=%{INT:data_length})
FILTER_ICMP_TYPE (?<icmp_type>(request|reply|unreachproto|unreachport|unreach|timeexceed|paramprob|redirect|maskreply|needfrag|tstamp|tstampreply)),
FILTER_ICMP_RESPONSE (%{FILTER_ICMP_ECHO_REQ_REPLY}|%{FILTER_ICMP_UNREACHPORT}| %{FILTER_ICMP_UNREACHPROTO}|%{FILTER_ICMP_UNREACHABLE}|%{FILTER_ICMP_NEED_FLAG}|%{FILTER_ICMP_TSTAMP}|%{FILTER_ICMP_TSTAMP_REPLY})
FILTER_ICMP_ECHO_REQ_REPLY (%{INT:icmp_echo_id}),(%{INT:icmp_echo_sequence})
FILTER_ICMP_UNREACHPORT (%{IP:icmp_unreachport_dest_ip}),(%{WORD:icmp_unreachport_protocol}),(%{INT:icmp_unreachport_port})
FILTER_ICMP_UNREACHPROTO (%{IP:icmp_unreach_dest_ip}),(%{WORD:icmp_unreachproto_protocol})
FILTER_ICMP_UNREACHABLE (%{GREEDYDATA:icmp_unreachable})
FILTER_ICMP_NEED_FLAG (%{IP:icmp_need_flag_ip}),(%{INT:icmp_need_flag_mtu})
FILTER_ICMP_TSTAMP (%{INT:icmp_tstamp_id}),(%{INT:icmp_tstamp_sequence})
FILTER_ICMP_TSTAMP_REPLY (%{INT:icmp_tstamp_reply_id}),(%{INT:icmp_tstamp_reply_sequence}),(%{INT:icmp_tstamp_reply_otime}),(%{INT:icmp_tstamp_reply_rtime}),(%{INT:icmp_tstamp_reply_ttime})

### CARP
FILTER_CARP_DATA (%{WORD:carp_type}),(%{INT:carp_ttl}),(%{INT:carp_vhid}),(%{INT:carp_version}),(%{INT:carp_advbase}),(%{INT:carp_advskew})

## dhcpd
DHCPD_DHCPDISCOVER %{WORD:dhcp_action} from %{COMMONMAC:dhcp_client_mac}%{SPACE}(\(%{GREEDYDATA:dhcp_client_hostname}\))? via (?<dhcp_client_vlan>[0-9a-z_]*)(: %{GREEDYDATA:dhcp_load_balance})?
DHCPD_DHCPOFFER %{WORD:dhcp_action} on %{IPV4:dhcp_client_ip} to %{COMMONMAC:dhcp_client_mac}%{SPACE}(\(%{GREEDYDATA:dhcp_client_hostname}\))? via (?<dhcp_client_vlan>[0-9a-z_]*)
DHCPD_DHCPREQUEST %{WORD:dhcp_action} for %{IPV4:dhcp_client_ip}%{SPACE}(\(%{IPV4:dhcp_ip_unknown}\))? from %{COMMONMAC:dhcp_client_mac}%{SPACE}(\(%{GREEDYDATA:dhcp_client_hostname}\))? via (?<dhcp_client_vlan>[0-9a-z_]*)(: %{GREEDYDATA:dhcp_request_message})?
DHCPD_DHCPACK %{WORD:dhcp_action} on %{IPV4:dhcp_client_ip} to %{COMMONMAC:dhcp_client_mac}%{SPACE}(\(%{GREEDYDATA:dhcp_client_hostname}\))? via (?<dhcp_client_vlan>[0-9a-z_]*)
DHCPD_DHCPINFORM %{WORD:dhcp_action} from %{IPV4:dhcp_client_ip} via %(?<dhcp_client_vlan>[0-9a-z_]*)
DHCPD_DHCPRELEASE %{WORD:dhcp_action} of %{IPV4:dhcp_client_ip} from %{COMMONMAC:dhcp_client_mac}%{SPACE}(\(%{GREEDYDATA:dhcp_client_hostname}\))? via (?<dhcp_client_vlan>[0-9a-z_]*) %{GREEDYDATA:dhcp_release_message}

## OpenVPN
OPENVPN_USER_AUTH user '%{USERNAME:pf_user}' authenticated
OPENVPN_PEER_CONN %{IP:src_ip}:%{INT:src_port} \[%{USERNAME:pf_user}\] Peer Connection Initiated with \[AF_INET\]%{IP:src_ip}:%{INT:src_port}
OPENVPN_USER_SEND %{USERNAME:pf_user}/%{IP:src_ip}:%{INT:src_port} send_push_reply\(\): safe_cap=%{WORD:openvpn_safe_cap}
OPENVPN_CONN_RESET %{USERNAME:pf_user}/%{IP:src_ip}:%{INT:src_port} Connection reset, restarting \[%{INT:openvpn_conn_cnt}\]
OPENVPN_CONN %{WORD} connection established with \[%{WORD}\]%{IP:src_ip}:%{INT:src_port}


## php-fpm
PHP_FPM_LOGIN %{URIPATH:php-fpm_url}: Successful %{WORD:php-fpm_status} for user '%{WORD:pf_user}' from: %{IP:src_ip}
PHP_FPM_LOGOUT %{URIPATH:php-fpm_url}: User %{WORD:php-fpm_status} out for user '%{WORD:pf_user}' from: %{IP:src_ip}
PHP_FPMM_FAILD %{URIPATH:php-fpm_url}: webConfigurator authentication %{WORD:php-fpm_status} for '%{WORD:pf_user}' from %{IP:src_ip}

# nginx
NGINX %{IPORHOST:host} %{SYSLOGPROG}: %{IP:src_ip} -(%{WORD:php-fpm-remote-user}|%{SPACE})- \[%{HTTPDATE:timestamp}\] "%{WORD:nginx-status} %{URIPATHPARAM:nginx-path} HTTP/%{NUMBER:nginx-httpver}" %{INT:nginx-statuscode} %{INT:nginx-length} "%{URI:referrer}" "%{GREEDYDATA:nginx-user_agent}"